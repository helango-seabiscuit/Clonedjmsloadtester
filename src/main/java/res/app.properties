###############################################################################
# for a detailed explanation look at the online User Guide
###############################################################################

# ****************** Connection Details Setup ******************

# the file containing the JNDI properties
# can be relative or absolute, leave relative if possible  
jndi.properties=src/main/java/res/jndi.properties

# the name of the javax.jms.ConnectionFactory located in JNDI
# this will be used to create the connections 
javax.jms.ConnectionFactory=ConnectionFactory

# username to use to connect, leave empty if not needed
#javax.jms.ConnectionFactory.username=hemalatha

# password to use to connect, leave empty if not needed
#javax.jms.ConnectionFactory.password=12345

# ****************** Listener Thread Setup ******************

# a number >= 0; e.g. 20, how many listener threads should be started
app.listener.thread.count=1

# how many milliseconds to wait before the next listener thread is started
app.listener.ramp.up.millis=100

# a number >= 0, e.g. 1000 a number telling each thread how many messages to wait for
app.listener.wait.for.message.count=5

# a name, e.g. FooQueue or FooTopic or Foo.Test.Topic
#the name of the JMS destination (Queue or Topic) each listener thread should connect to and wait for incoming messages
app.listener.listen.to.destination=queue/HemaMDB1Queue

# set this to true if you have CLIENT_ACKNOWLEDGE set on the session and you need to acknowledge every message
# otherwise it will be auto acknowledged by the other ack modes
# will force the call to Òmessage.acknowledge();Ó on receive of a message. you could set this to true if you are using
# the ÒCLIENT_ACKNOWLEDGEÓ as javax.jms.session.acknowledge.mode. if you set it to false and use CLIENT_ACKNOWLEDGE
# then the broker keeps a message until it is consumed and acknowledged. when the app finishes and hasnÕt
# acknowledged the messages it has received(which ÒfalseÓ will do) the broker will recover the messages as the client
# session has stopped and the broker thinks it has to redeliver the message, which it will the next time a client
# connects to the destination(queue here).
# AUTO_ACKNOWLEDGE and DUPS_OK_ACKNOWLEDGE will autmatically acknowledge the message so ÒfalseÓ is fine.
app.listener.explicit.acknowledge.message=false

# ****************** Sender Thread Setup ******************

# a number >= 0; e.g. 20, how many sender threads should be started
app.sender.threads.to.start=1

# how many milliseconds to wait before the next sender thread is started
app.sender.ramp.up.millis=100

# a name, e.g. FooQueue or FooTopic or Foo.Test.Topic
#the name of the JMS destination (Queue or Topic) each sender thread should send the messages to
app.sender.send.to.destination=queue/HemaMDB1Queue

# STATIC or FOLDER, tells each sender what message content to send.
# always the same (=STATIC) or all files in a specific folder(FOLDER). can match files on regular expressions and
# embed custom fields that change for each message sent.
# have a look at the online documentation for details!
#app.sender.message.content.strategy=STATIC#5#aaaaa
app.sender.message.content.strategy=FOLDER#8#.*txt#/home/hemalatha/Dropbox/workspace/jmsloadtester/src/test/resources/testmessages/dir1/dir2

# tells each sender thread how many milliseconds to pause between each send
app.sender.pause.millis.between.send=0

# ByteMessageFactory or TextMessageFactory, determines which message type will be used
# TextMessageFactory -> javax.jms.TextMessage, ByteMessage -> javax.jms.BytesMessage
javax.jms.message.factory=de.marcelsauer.jmsloadtester.message.TextMessageFactory

# AUTO_ACKNOWLEDGE, CLIENT_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE
# see http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Session.html#AUTO_ACKNOWLEDGE
# used when the session handler defined under "javax.jms.session.handler" is called to create the session
javax.jms.session.acknowledge.mode=AUTO_ACKNOWLEDGE

# can be PERSISTENT or NON_PERSISTENT
# see http://java.sun.com/j2ee/1.4/docs/api/javax/jms/DeliveryMode.html
javax.jms.delivery.mode=PERSISTENT

# see http://java.sun.com/j2ee/1.4/docs/api/javax/jms/MessageProducer.html#setTimeToLive(long)
# in milliseconds
# 0 = indefinite
javax.jms.message.producer.time.to.live=0

# see http://java.sun.com/j2ee/1.4/docs/api/javax/jms/MessageProducer.html#setPriority(int)
# 0(lowest) - 9(highest)
javax.jms.message.producer.priority=4

# ****************** Customization Setup ******************

# only change the following values if you want to extend the JMS Load Tester with your own functionality

# a comma separated list of type de.marcelsauer.jmsloadtester.message.MessageInterceptor
# the default Sender adds some properties to the jms message
# each interceptor will be called before the message is sent. they get the message and some other framework
# instances to alter the message
app.message.interceptors=de.marcelsauer.jmsloadtester.client.Sender

# gets a connection and creates a session(one session per thread) with "javax.jms.session.acknowledge.mode" set
# will be used for sender and listener, even if only the listener makes use if it
# should extend de.marcelsauer.jmsloadtester.handler.AbstractThreadAwareSessionHandler which will handle the thread context
javax.jms.session.handler=de.marcelsauer.jmsloadtester.handler.DefaultSessionHandlerImpl

# ****************** Progress Information Setup ******************

# how many seconds between progress is printed, 1 second interval should be ok
app.output.pause.seconds.between.printing.progress=1

# ****************** Output setup ******************

# for each of the following three choose one of STDOUT, STDERR, SILENT, FILE

# tells the application what to do with the debug output, useful for debugging and seeing what goes on
app.output.debug.strategy=STDOUT

# tells the application what to do with the result/summary after the app is finished
app.output.result.strategy=STDOUT

# tells the application what to do with each message that is received
app.output.message.strategy=STDOUT
